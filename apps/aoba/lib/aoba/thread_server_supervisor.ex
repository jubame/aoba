defmodule Aoba.ThreadServerSupervisor do
  use DynamicSupervisor
  alias Aoba.ThreadServer


  @docp """
  [error] GenServer #PID<0.456.0> terminating
  ** (ArgumentError) supervisors expect each child to be one of the following:

    * a module
    * a {module, arg} tuple
    * a child specification as a map with at least the :id and :start fields
    * or a tuple with 6 elements generated by Supervisor.Spec (deprecated)

  Got: [{#DateTime<2019-06-15 14:36:56.899639Z>, :nonode@nohost}]
  """

  def start_thread(%{type: "text", content: content}, entry_id) do
    # Por lo tanto, esto llamará a ThreadServer.start_link(name)
    child = {
      Aoba.ThreadServer,
      # varios parámetros como keyword list
      # https://elixirforum.com/t/dynamicsupervisor-starting-child-with-more-than-one-argument/12998/2
      id: DateTime.to_unix(DateTime.utc_now())*10 + node_to_number(),
      type_and_content: %{type: "text", content: content},
      entry_id: entry_id
    }
    resultado = DynamicSupervisor.start_child(__MODULE__, child)
    #IO.puts(inspect(resultado))
    resultado
  end


  def start_thread(%{type: "media", content: content}) do
    # Por lo tanto, esto llamará a ThreadServer.start_link(name)
    child = {
      Aoba.ThreadServer,
      # varios parámetros como keyword list
      # https://elixirforum.com/t/dynamicsupervisor-starting-child-with-more-than-one-argument/12998/2
      id: DateTime.to_unix(DateTime.utc_now())*10 + node_to_number(),
      type_and_content: %{type: "media", content: content}
    }
    resultado = DynamicSupervisor.start_child(__MODULE__, child)
    #IO.puts(inspect(resultado))
    resultado
  end






  defp node_to_number() do
    Node.self()
    |> Atom.to_string()
    |> String.split("@")
    |> Enum.at(0)
    |> String.to_integer()
  end


  def stop_thread(name) do
    DynamicSupervisor.terminate_child(__MODULE__, pid_from_name(name))
  end

  # Llamado por Aoba.Supervisor, la raíz.
  def start_link(_options) do
    # Supervisor.start_link/3 triggers the init/1 callback function
    DynamicSupervisor.start_link(__MODULE__, :ok, name: __MODULE__)
  end

  def init(:ok) do
    # Esto configura, pero todavia no inicia nada
    DynamicSupervisor.init(strategy: :one_for_one)
  end

  defp pid_from_name(name) do
    name
    |> ThreadServer.via_tuple()
    |> GenServer.whereis()
  end

  @docp """

  Desde el explorador:
    window.newThread("moshi moshi")
    window.newThread("moshi moshi")
    window.newThread("moshi moshi")



  {#DateTime<2019-06-15 16:33:14.805575Z>, :nonode@nohost}
  "moshi moshi"

  HOLA
  [debug] INCOMING "new_thread" on "threadserver:lobby" to AobaWeb.ThreadServerChannel
    Parameters: %{"content" => "moshi moshi"}
  {#DateTime<2019-06-15 16:33:17.960664Z>, :nonode@nohost}
  "moshi moshi"

  HOLA
  [debug] INCOMING "new_thread" on "threadserver:lobby" to AobaWeb.ThreadServerChannel
    Parameters: %{"content" => "moshi moshi"}
  {#DateTime<2019-06-15 16:33:18.801288Z>, :nonode@nohost}
  "moshi moshi"

  HOLA

  nil
  iex(10)> alias Aoba.ThreadServerSupervisor
  Aoba.ThreadServerSupervisor
  iex(11)> Supervisor.which_children(ThreadServerSupervisor)
  [
    {:undefined, #PID<0.463.0>, :worker, [Aoba.ThreadServer]},
    {:undefined, #PID<0.464.0>, :worker, [Aoba.ThreadServer]},
    {:undefined, #PID<0.465.0>, :worker, [Aoba.ThreadServer]}
  ]
  iex(12)>  :sys.get_state("<0.463.0>" |> :erlang.binary_to_list |> :erlang.list_to_pid)
  %Aoba.Thread{
    post_id: 2,
    posts: %{
      1 => %Aoba.Post{
        body: %Aoba.Body{auto_id: 2, entries: %{1 => "moshi moshi"}},
        date: #DateTime<2019-06-15 16:33:14.877120Z>,
        id: 1,
        media: "",
        username: "anon"
      }
    },
    thread_id: {#DateTime<2019-06-15 16:33:14.872772Z>, :nonode@nohost}
  }
  iex(13)>

  """


end
